/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface RPSContractInterface extends utils.Interface {
  functions: {
    "None()": FunctionFragment;
    "Paper()": FunctionFragment;
    "Rock()": FunctionFragment;
    "Scissors()": FunctionFragment;
    "commitChoice(bytes32)": FunctionFragment;
    "getChoices()": FunctionFragment;
    "getChoicesHashes()": FunctionFragment;
    "getHash(string)": FunctionFragment;
    "getWinner()": FunctionFragment;
    "revealChoice(string,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "None"
      | "Paper"
      | "Rock"
      | "Scissors"
      | "commitChoice"
      | "getChoices"
      | "getChoicesHashes"
      | "getHash"
      | "getWinner"
      | "revealChoice"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "None", values?: undefined): string;
  encodeFunctionData(functionFragment: "Paper", values?: undefined): string;
  encodeFunctionData(functionFragment: "Rock", values?: undefined): string;
  encodeFunctionData(functionFragment: "Scissors", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "commitChoice",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getChoices",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getChoicesHashes",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getHash",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getWinner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "revealChoice",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "None", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Paper", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Rock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "Scissors", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "commitChoice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getChoices", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getChoicesHashes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getHash", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getWinner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealChoice",
    data: BytesLike
  ): Result;

  events: {
    "ChoicesDone()": EventFragment;
    "ResultsRevealed(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ChoicesDone"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ResultsRevealed"): EventFragment;
}

export interface ChoicesDoneEventObject {}
export type ChoicesDoneEvent = TypedEvent<[], ChoicesDoneEventObject>;

export type ChoicesDoneEventFilter = TypedEventFilter<ChoicesDoneEvent>;

export interface ResultsRevealedEventObject {
  winner: string;
}
export type ResultsRevealedEvent = TypedEvent<
  [string],
  ResultsRevealedEventObject
>;

export type ResultsRevealedEventFilter = TypedEventFilter<ResultsRevealedEvent>;

export interface RPSContract extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: RPSContractInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    None(overrides?: CallOverrides): Promise<[string]>;

    Paper(overrides?: CallOverrides): Promise<[string]>;

    Rock(overrides?: CallOverrides): Promise<[string]>;

    Scissors(overrides?: CallOverrides): Promise<[string]>;

    commitChoice(
      _choiceHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getChoices(overrides?: CallOverrides): Promise<[[string, string]]>;

    getChoicesHashes(overrides?: CallOverrides): Promise<[[string, string]]>;

    getHash(
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getWinner(overrides?: CallOverrides): Promise<[string]>;

    revealChoice(
      _choice: PromiseOrValue<string>,
      _suffix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  None(overrides?: CallOverrides): Promise<string>;

  Paper(overrides?: CallOverrides): Promise<string>;

  Rock(overrides?: CallOverrides): Promise<string>;

  Scissors(overrides?: CallOverrides): Promise<string>;

  commitChoice(
    _choiceHash: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getChoices(overrides?: CallOverrides): Promise<[string, string]>;

  getChoicesHashes(overrides?: CallOverrides): Promise<[string, string]>;

  getHash(
    s: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getWinner(overrides?: CallOverrides): Promise<string>;

  revealChoice(
    _choice: PromiseOrValue<string>,
    _suffix: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    None(overrides?: CallOverrides): Promise<string>;

    Paper(overrides?: CallOverrides): Promise<string>;

    Rock(overrides?: CallOverrides): Promise<string>;

    Scissors(overrides?: CallOverrides): Promise<string>;

    commitChoice(
      _choiceHash: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getChoices(overrides?: CallOverrides): Promise<[string, string]>;

    getChoicesHashes(overrides?: CallOverrides): Promise<[string, string]>;

    getHash(
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getWinner(overrides?: CallOverrides): Promise<string>;

    revealChoice(
      _choice: PromiseOrValue<string>,
      _suffix: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ChoicesDone()"(): ChoicesDoneEventFilter;
    ChoicesDone(): ChoicesDoneEventFilter;

    "ResultsRevealed(address)"(winner?: null): ResultsRevealedEventFilter;
    ResultsRevealed(winner?: null): ResultsRevealedEventFilter;
  };

  estimateGas: {
    None(overrides?: CallOverrides): Promise<BigNumber>;

    Paper(overrides?: CallOverrides): Promise<BigNumber>;

    Rock(overrides?: CallOverrides): Promise<BigNumber>;

    Scissors(overrides?: CallOverrides): Promise<BigNumber>;

    commitChoice(
      _choiceHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getChoices(overrides?: CallOverrides): Promise<BigNumber>;

    getChoicesHashes(overrides?: CallOverrides): Promise<BigNumber>;

    getHash(
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getWinner(overrides?: CallOverrides): Promise<BigNumber>;

    revealChoice(
      _choice: PromiseOrValue<string>,
      _suffix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    None(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Paper(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Rock(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    Scissors(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    commitChoice(
      _choiceHash: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getChoices(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getChoicesHashes(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getHash(
      s: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWinner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revealChoice(
      _choice: PromiseOrValue<string>,
      _suffix: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
